/*
Deployment script for DB_MDA_CR_OA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DB_MDA_CR_OA"
:setvar DefaultFilePrefix "DB_MDA_CR_OA"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
PRINT N'Dropping [adm].[utbUsersDefaultAuthorizationFlagFalse]...';


GO
ALTER TABLE [adm].[utbUsers] DROP CONSTRAINT [utbUsersDefaultAuthorizationFlagFalse];


GO
PRINT N'Dropping [adm].[utbUsersDefaultActiveFlagTrue]...';


GO
ALTER TABLE [adm].[utbUsers] DROP CONSTRAINT [utbUsersDefaultActiveFlagTrue];


GO
PRINT N'Dropping [adm].[utbUsersDefaultLastModifyDateSysDateTime]...';


GO
ALTER TABLE [adm].[utbUsers] DROP CONSTRAINT [utbUsersDefaultLastModifyDateSysDateTime];


GO
PRINT N'Dropping [adm].[utbUsersDefaultLastModifyUserSuser_Sname]...';


GO
ALTER TABLE [adm].[utbUsers] DROP CONSTRAINT [utbUsersDefaultLastModifyUserSuser_Sname];


GO
PRINT N'Dropping [adm].[utbUsersDefaultCreationUserSuser_sSame]...';


GO
ALTER TABLE [adm].[utbUsers] DROP CONSTRAINT [utbUsersDefaultCreationUserSuser_sSame];


GO
PRINT N'Dropping [adm].[utbUsersDefaultCreationDateSysDateTime]...';


GO
ALTER TABLE [adm].[utbUsers] DROP CONSTRAINT [utbUsersDefaultCreationDateSysDateTime];


GO
PRINT N'Dropping [music].[fk.music.utbMSFavoritesbyUsers.adm.utbUsers.UserID]...';


GO
ALTER TABLE [music].[utbMSFavoritesbyUser] DROP CONSTRAINT [fk.music.utbMSFavoritesbyUsers.adm.utbUsers.UserID];


GO
PRINT N'Dropping [adm].[fk.adm.utbRolesbyUser.adm.utbUsers.UserID]...';


GO
ALTER TABLE [adm].[utbRolesbyUser] DROP CONSTRAINT [fk.adm.utbRolesbyUser.adm.utbUsers.UserID];


GO
PRINT N'Dropping [adm].[fk.adm.utbUsers.adm.utbResetPasswords.UserID]...';


GO
ALTER TABLE [adm].[utbResetPasswords] DROP CONSTRAINT [fk.adm.utbUsers.adm.utbResetPasswords.UserID];


GO
PRINT N'Starting rebuilding table [adm].[utbUsers]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [adm].[tmp_ms_xx_utbUsers] (
    [UserID]            INT           IDENTITY (1, 1) NOT NULL,
    [FullName]          VARCHAR (50)  NOT NULL,
    [UserName]          VARCHAR (50)  NOT NULL,
    [Email]             VARCHAR (50)  NOT NULL,
    [PasswordHash]      BINARY (64)   NOT NULL,
    [InternalUser]      BIT           CONSTRAINT [utbUsersDefaultInternalUserFalse] DEFAULT ((0)) NOT NULL,
    [ActiveFlag]        BIT           CONSTRAINT [utbUsersDefaultActiveFlagTrue] DEFAULT ((1)) NOT NULL,
    [AuthorizationFlag] BIT           CONSTRAINT [utbUsersDefaultAuthorizationFlagFalse] DEFAULT ((0)) NOT NULL,
    [CreationDate]      DATETIME      CONSTRAINT [utbUsersDefaultCreationDateSysDateTime] DEFAULT (sysdatetime()) NOT NULL,
    [CreationUser]      VARCHAR (100) CONSTRAINT [utbUsersDefaultCreationUserSuser_sSame] DEFAULT (suser_sname()) NOT NULL,
    [LastModifyDate]    DATETIME      CONSTRAINT [utbUsersDefaultLastModifyDateSysDateTime] DEFAULT (sysdatetime()) NOT NULL,
    [LastModifyUser]    VARCHAR (100) CONSTRAINT [utbUsersDefaultLastModifyUserSuser_Sname] DEFAULT (suser_sname()) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_utbUserID1] PRIMARY KEY CLUSTERED ([UserID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [adm].[utbUsers])
    BEGIN
        SET IDENTITY_INSERT [adm].[tmp_ms_xx_utbUsers] ON;
        INSERT INTO [adm].[tmp_ms_xx_utbUsers] ([UserID], [FullName], [UserName], [Email], [PasswordHash], [ActiveFlag], [AuthorizationFlag], [CreationDate], [CreationUser], [LastModifyDate], [LastModifyUser])
        SELECT   [UserID],
                 [FullName],
                 [UserName],
                 [Email],
                 [PasswordHash],
                 [ActiveFlag],
                 [AuthorizationFlag],
                 [CreationDate],
                 [CreationUser],
                 [LastModifyDate],
                 [LastModifyUser]
        FROM     [adm].[utbUsers]
        ORDER BY [UserID] ASC;
        SET IDENTITY_INSERT [adm].[tmp_ms_xx_utbUsers] OFF;
    END

DROP TABLE [adm].[utbUsers];

EXECUTE sp_rename N'[adm].[tmp_ms_xx_utbUsers]', N'utbUsers';

EXECUTE sp_rename N'[adm].[tmp_ms_xx_constraint_utbUserID1]', N'utbUserID', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [music].[fk.music.utbMSFavoritesbyUsers.adm.utbUsers.UserID]...';


GO
ALTER TABLE [music].[utbMSFavoritesbyUser] WITH NOCHECK
    ADD CONSTRAINT [fk.music.utbMSFavoritesbyUsers.adm.utbUsers.UserID] FOREIGN KEY ([UserID]) REFERENCES [adm].[utbUsers] ([UserID]);


GO
PRINT N'Creating [adm].[fk.adm.utbRolesbyUser.adm.utbUsers.UserID]...';


GO
ALTER TABLE [adm].[utbRolesbyUser] WITH NOCHECK
    ADD CONSTRAINT [fk.adm.utbRolesbyUser.adm.utbUsers.UserID] FOREIGN KEY ([UserID]) REFERENCES [adm].[utbUsers] ([UserID]);


GO
PRINT N'Creating [adm].[fk.adm.utbUsers.adm.utbResetPasswords.UserID]...';


GO
ALTER TABLE [adm].[utbResetPasswords] WITH NOCHECK
    ADD CONSTRAINT [fk.adm.utbUsers.adm.utbResetPasswords.UserID] FOREIGN KEY ([UserID]) REFERENCES [adm].[utbUsers] ([UserID]);


GO
PRINT N'Creating [adm].[utrLogUsers]...';


GO
CREATE TRIGGER [adm].[utrLogUsers] ON [adm].[utbUsers]
FOR INSERT,UPDATE
AS
	BEGIN
		DECLARE @INSERTUPDATE VARCHAR(30)
		DECLARE @StartValues	XML = (SELECT [UserID],[FullName],[UserName],[Email],[InternalUser],[ActiveFlag],[AuthorizationFlag],[CreationDate],[CreationUser],[LastModifyDate],[LastModifyUser] FROM Deleted [Values] for xml AUTO, ELEMENTS XSINIL)
		DECLARE @EndValues		XML = (SELECT [UserID],[FullName],[UserName],[Email],[InternalUser],[ActiveFlag],[AuthorizationFlag],[CreationDate],[CreationUser],[LastModifyDate],[LastModifyUser] FROM Inserted [Values] for xml AUTO, ELEMENTS XSINIL)

		CREATE TABLE #DBCC (EventType varchar(50), Parameters varchar(50), EventInfo nvarchar(max))

		INSERT INTO #DBCC
		EXEC ('DBCC INPUTBUFFER(@@SPID)')

		--Assume it is an insert
		SET @INSERTUPDATE ='INSERT'
		--If there's data in deleted, it's an update
		IF EXISTS(SELECT * FROM Deleted)
		  SET @INSERTUPDATE='UPDATE'

		INSERT INTO [adm].[utbLogActivities] ([ActivityType],[TargetTable],[SQLStatement],[StartValues],[EndValues],[User],[LogActivityDate])
		SELECT	@INSERTUPDATE
				,'[adm].[utbUsers]'
				,(SELECT EventInfo FROM #DBCC)
				,@StartValues
				,@EndValues
				,[LastModifyUser]
				,GETDATE()
		FROM	Inserted
	END;
GO
PRINT N'Altering [adm].[uspAddUser]...';


GO
-- ======================================================================
-- Name: [adm].[uspAddUser]
-- Desc: Se utiliza para la creación de nuevos usuarios
-- Auth: Jonathan Piedra jonitapc_quimind@hotmail.com
-- Date: 5/24/2019
-------------------------------------------------------------
-- Change History
-------------------------------------------------------------
-- CI	Date		Author		Description
-- --	----		------		-----------------------------
-- ======================================================================

ALTER PROCEDURE [adm].[uspAddUser]
	@InsertUser		VARCHAR(50),
	@FullName		VARCHAR(50),
	@UserName		VARCHAR(50),
	@Email			VARCHAR(50),
	@Password		VARCHAR(50),
	@RoleID			INT	= NULL
AS 
    BEGIN
        SET NOCOUNT ON
        SET XACT_ABORT ON
                           
        BEGIN TRY
            DECLARE @lErrorMessage NVARCHAR(4000)
            DECLARE @lErrorSeverity INT
            DECLARE @lErrorState INT
            DECLARE @lLocalTran BIT = 0
                               
            IF @@TRANCOUNT = 0 
                BEGIN
                    BEGIN TRANSACTION
                    SET @lLocalTran = 1
                END

            -- =======================================================
				DECLARE	@UserID INT

				IF(@RoleID IS NULL)
					BEGIN
						INSERT INTO [adm].[utbUsers] ([FullName],[UserName],[Email],[PasswordHash],[CreationUser],[LastModifyUser])
						VALUES (@FullName, @UserName,@Email,HASHBYTES('SHA2_512',@Password),@InsertUser,@InsertUser)
					END
				ELSE
					BEGIN
						INSERT INTO [adm].[utbUsers] ([FullName],[UserName],[Email],[PasswordHash],[InternalUser],[AuthorizationFlag],[CreationUser],[LastModifyUser])
						VALUES (@FullName, @UserName,@Email,HASHBYTES('SHA2_512',@Password),1,1,@InsertUser,@InsertUser)
					END
			-- =======================================================

        IF ( @@trancount > 0
                 AND @lLocalTran = 1
               ) 
                BEGIN
                    COMMIT TRANSACTION
                END
        END TRY
        BEGIN CATCH
            IF ( @@trancount > 0
                 AND XACT_STATE() <> 0
               ) 
                BEGIN
                    ROLLBACK TRANSACTION
                END

            SELECT  @lErrorMessage = ERROR_MESSAGE() ,
                    @lErrorSeverity = ERROR_SEVERITY() ,
                    @lErrorState = ERROR_STATE()       

            RAISERROR (@lErrorMessage, @lErrorSeverity, @lErrorState);
        END CATCH
    END

    SET NOCOUNT OFF
    SET XACT_ABORT OFF
GO
PRINT N'Altering [adm].[uspSearchUser]...';


GO

-- ======================================================================
-- Name: [adm].[uspSearchUser]
-- Desc: Permite mostrar la informacion de un usuario en especifico
-- Auth: Jonathan Piedra jonitapc_quimind@hotmail.com
-- Date: 05/24/2019
-------------------------------------------------------------
-- Change History
-------------------------------------------------------------
-- CI	Date		Author		Description
-- --	----		------		-----------------------------
-- ======================================================================

ALTER PROCEDURE [adm].[uspSearchUser]
		@UserID INT,
		@AppID	INT
AS 
    BEGIN
        SET NOCOUNT ON
        BEGIN TRY
            DECLARE @lErrorMessage NVARCHAR(4000)
            DECLARE @lErrorSeverity INT
            DECLARE @lErrorState INT

            -- =======================================================
				SELECT	U.[UserID]
						,U.[FullName]
						,U.[UserName]
						,U.[Email]
						,U.[InternalUser]
						,RU.[RoleID]
						,U.[ActiveFlag]
						,U.[AuthorizationFlag]  
				FROM	[adm].[utbUsers] U
						LEFT JOIN [adm].[utbRolesbyUser] RU ON RU.[UserID] = U.[UserID] AND RU.[ActiveFlag] = 1
						LEFT JOIN [adm].[utbRoles] R ON RU.[RoleID] = RU.[RoleID] AND R.[ApplicationID] = @AppID 
				WHERE	U.[UserID] = @UserID
			-- =======================================================

        END TRY
        BEGIN CATCH

            SELECT  @lErrorMessage = ERROR_MESSAGE() ,
                    @lErrorSeverity = ERROR_SEVERITY() ,
                    @lErrorState = ERROR_STATE()       

            RAISERROR (@lErrorMessage, @lErrorSeverity, @lErrorState);
        END CATCH
    END
    SET NOCOUNT OFF
GO
PRINT N'Creating [adm].[utbUsers].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Esta tabla contiene toda la información referente a los diferentes usuarios.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers';


GO
PRINT N'Creating [adm].[utbUsers].[UserID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ID de identidad del usuario.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'UserID';


GO
PRINT N'Creating [adm].[utbUsers].[FullName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Nombre completo del usuario.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'FullName';


GO
PRINT N'Creating [adm].[utbUsers].[UserName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Nombre de usuario.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'UserName';


GO
PRINT N'Creating [adm].[utbUsers].[Email].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Email del usuario.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'Email';


GO
PRINT N'Creating [adm].[utbUsers].[PasswordHash].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Password encriptado del usuario.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'PasswordHash';


GO
PRINT N'Creating [adm].[utbUsers].[InternalUser].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Esto indica si el usuario es miembro de alguno de los equipos de trabajo en al iglesia.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'InternalUser';


GO
PRINT N'Creating [adm].[utbUsers].[ActiveFlag].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Este flag indica si el usuario esta activo o no.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'ActiveFlag';


GO
PRINT N'Creating [adm].[utbUsers].[AuthorizationFlag].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Este flag indica si el usuario esta autorizado o no.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'AuthorizationFlag';


GO
PRINT N'Creating [adm].[utbUsers].[CreationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Fecha de creacion del usuario.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'CreationDate';


GO
PRINT N'Creating [adm].[utbUsers].[CreationUser].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Usuario que creo el nuevo usuario.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'CreationUser';


GO
PRINT N'Creating [adm].[utbUsers].[LastModifyDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Fecha de la ultima modificación realizada sobre el usuario.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'LastModifyDate';


GO
PRINT N'Creating [adm].[utbUsers].[LastModifyUser].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Nombre del usuario que realizo la ultima modificación sobre el usuario.', @level0type = N'SCHEMA', @level0name = N'adm', @level1type = N'TABLE', @level1name = N'utbUsers', @level2type = N'COLUMN', @level2name = N'LastModifyUser';


GO
PRINT N'Refreshing [adm].[uspCheckAvailabilityEmail]...';


GO
EXECUTE sp_refreshsqlmodule N'[adm].[uspCheckAvailabilityEmail]';


GO
PRINT N'Refreshing [adm].[uspCheckAvailabilityUserName]...';


GO
EXECUTE sp_refreshsqlmodule N'[adm].[uspCheckAvailabilityUserName]';


GO
PRINT N'Refreshing [adm].[uspGenerateGUIDResetPassword]...';


GO
EXECUTE sp_refreshsqlmodule N'[adm].[uspGenerateGUIDResetPassword]';


GO
PRINT N'Refreshing [adm].[uspLogin]...';


GO
EXECUTE sp_refreshsqlmodule N'[adm].[uspLogin]';


GO
PRINT N'Refreshing [adm].[uspReadAdministrators]...';


GO
EXECUTE sp_refreshsqlmodule N'[adm].[uspReadAdministrators]';


GO
PRINT N'Refreshing [adm].[uspReadLabelMainMenu]...';


GO
EXECUTE sp_refreshsqlmodule N'[adm].[uspReadLabelMainMenu]';


GO
PRINT N'Refreshing [adm].[uspReadUsers]...';


GO
EXECUTE sp_refreshsqlmodule N'[adm].[uspReadUsers]';


GO
PRINT N'Refreshing [adm].[uspReadWebDirectorybyUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[adm].[uspReadWebDirectorybyUser]';


GO
PRINT N'Refreshing [adm].[uspResetPassword]...';


GO
EXECUTE sp_refreshsqlmodule N'[adm].[uspResetPassword]';


GO
PRINT N'Refreshing [adm].[uspSearchControllerValidation]...';


GO
EXECUTE sp_refreshsqlmodule N'[adm].[uspSearchControllerValidation]';


GO
PRINT N'Refreshing [adm].[uspUpdateUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[adm].[uspUpdateUser]';


GO
PRINT N'Refreshing [music].[uspReadMusicSheets]...';


GO
EXECUTE sp_refreshsqlmodule N'[music].[uspReadMusicSheets]';


GO
PRINT N'Refreshing [music].[uspReadMusicSheetsbySong]...';


GO
EXECUTE sp_refreshsqlmodule N'[music].[uspReadMusicSheetsbySong]';


GO
PRINT N'Refreshing [music].[uspSearchMusicSheet]...';


GO
EXECUTE sp_refreshsqlmodule N'[music].[uspSearchMusicSheet]';


GO
PRINT N'Refreshing [music].[uspUpdateMSFavorite]...';


GO
EXECUTE sp_refreshsqlmodule N'[music].[uspUpdateMSFavorite]';


GO
